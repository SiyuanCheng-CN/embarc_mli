
#include <stdint.h>

#include "mli_types.h"
#include "test_tensor_quantizer.h"

using mli::tst::tensor_quantizer;

// Generated input vectors Declaration
//========================================

extern mli::tst::tensor_quantizer input_1_fx16;
extern mli::tst::tensor_quantizer input_1_sa8;

extern mli::tst::tensor_quantizer input_2_fx16;
extern mli::tst::tensor_quantizer input_2_sa8;

// Generated prev_out vectors Declaration
//========================================
extern mli::tst::tensor_quantizer prev_out_1_fx16;
extern mli::tst::tensor_quantizer prev_out_1_sa8;

extern mli::tst::tensor_quantizer prev_out_2_fx16;
extern mli::tst::tensor_quantizer prev_out_2_sa8;

// Generated weights vectors Declaration
//========================================

extern mli::tst::tensor_quantizer weights_1_fx16;
extern mli::tst::tensor_quantizer weights_1_fx8;
extern mli::tst::tensor_quantizer weights_1_sa8;

extern mli::tst::tensor_quantizer bias_1_fx16;
extern mli::tst::tensor_quantizer bias_1_fx8;
extern mli::tst::tensor_quantizer bias_1_sa32;
extern mli::tst::tensor_quantizer bias_1_i2_w1_sa32;

// Extracted Output vectors Declaration
//===================================================

extern mli::tst::tensor_quantizer test_1_out_fx16;
extern mli::tst::tensor_quantizer test_1_out_sa8;

extern mli::tst::tensor_quantizer test_2_out_fx16;
extern mli::tst::tensor_quantizer test_2_out_sa8;

extern mli::tst::tensor_quantizer test_3_out_fx16;
extern mli::tst::tensor_quantizer test_3_out_sa8;

// Tests configuration structures Declaration
//========================================

extern const mli_rnn_cell_cfg test_1_cfg;
extern const mli_rnn_cell_cfg test_2_cfg;
extern const mli_rnn_cell_cfg test_3_cfg;




// Generated input vectors 
//========================================
static const float input_1_data[] = {
    -0.415297f, -0.215602f, -0.224471f, 0.425234f, 0.393946f, 0.319190f, 0.223616f, 0.395063f, 0.416117f, -0.362076f, 
    0.148384f, 0.110488f, 0.087299f, -0.367846f, -0.193504f, -0.126205f, 0.068204f, -0.036116f, 0.251742f, 0.193596f, 
    -0.042296f, 0.240892f, -0.090350f, 0.178147f, 0.210440f, 0.016769f, 0.401194f, -0.121946f, 0.484959f, 0.100640f, 
    -0.149406f, -0.307035f, 0.189378f, 0.317703f, 0.104494f, -0.161902f, 0.392820f, 0.316499f, -0.469984f, -0.381549f, 
    0.023448f, 0.108471f, 0.471942f, -0.188504f, -0.313705f, 0.101103f, 0.146604f, -0.100607f, 0.314789f, 0.175973f, 
    0.230340f, -0.339531f, -0.390697f, 0.402628f, -0.452781f, 0.402353f, 0.425325f, -0.213981f, 0.329443f, -0.048765f, 
    0.243606f, -0.386908f, 0.228630f, -0.437846f, 0.415397f, -0.388029f, 0.381669f, -0.468611f, -0.438143f, 0.365452f, 
    -0.199898f, -0.041080f, -0.188775f, 0.227021f, 0.224080f, 0.436978f, -0.222522f, 0.216967f, -0.489663f, -0.147131f, 
    0.171362f, -0.179062f, 0.207909f, 0.286282f, 0.456770f, 0.053233f, -0.188437f, 0.200552f, -0.459745f, -0.467098f, 
    -0.073981f, -0.393418f, -0.046866f, -0.256056f, -0.168622f, 0.024018f, 0.312583f, 0.404920f, -0.128252f, -0.195426f, 
    0.331349f, -0.025850f, -0.210009f, -0.228304f, 0.007194f, -0.234319f, -0.076125f, -0.318358f, 0.019112f, 0.283709f, 
    -0.304293f, -0.265468f, -0.058526f, 0.395846f, 0.229520f, -0.229140f, -0.367296f, 0.086669f, 0.314014f, -0.448195f, 
    0.038448f, -0.131283f, -0.152695f, -0.154024f, 0.222740f, 0.311522f, 0.134357f, 0.304217f, -0.282900f, -0.458316f, 
    -0.335441f, -0.264267f, 0.021678f, -0.119994f, 0.007382f, -0.283295f, -0.094535f, -0.417599f, 0.253382f, 0.013179f, 
    0.334032f, 0.457341f, 0.290097f, 0.146073f, -0.144798f, 0.013437f, -0.380977f, 0.319634f, -0.098425f, -0.203118f, 
    -0.066592f, 0.210601f, -0.099572f, 0.337519f, -0.097299f, -0.494470f, -0.426042f, -0.067178f, 0.167479f, 0.082491f, 
    0.178365f, -0.130471f, -0.015627f, 0.019410f, 0.287742f, -0.012857f, 0.349484f, 0.056291f, 0.055468f, 0.482765f, 
    -0.351804f, 0.384766f, -0.319335f, 0.163880f, -0.171180f, 0.005860f, -0.383456f, -0.309319f, 0.308043f, -0.393788f, 
    0.470342f, -0.241170f, -0.262480f, 0.081521f, -0.203943f, -0.287501f, 0.061783f, -0.010821f, 0.189818f, -0.171088f, 
    0.295228f, -0.321774f, -0.142651f, -0.213464f, -0.436013f, -0.248028f, 0.315523f, -0.322876f, 0.077987f, -0.226923f, 
    -0.200767f, -0.153505f, -0.178595f, 0.396243f, -0.285458f, -0.376548f, 0.293885f, -0.212658f, 0.367033f, -0.312916f, 
    -0.396637f, -0.433871f, 0.415061f, 0.021534f, -0.125904f, -0.349902f, 0.288844f, 0.130832f, 0.017798f, 0.140803f, 
    -0.490365f, -0.038377f, -0.168184f, 0.101862f, 0.058234f, 0.419909f, 0.411093f, 0.434236f, 0.178803f, -0.136786f, 
    0.450394f, -0.471130f, -0.297692f, -0.276371f, 0.129592f, -0.335603f, -0.237999f, 0.298684f, 0.056763f, 0.014300f, 
    -0.488553f, 0.139902f, 0.322417f, -0.022869f, -0.229211f, -0.160981f, 0.456307f, 0.409685f, 0.071396f, -0.206473f, 
    0.063866f, -0.103144f, -0.002472f, -0.054315f, -0.013456f, -0.166525f, -0.057392f, -0.443209f, -0.417137f, -0.471760f, 
    0.107477f, 0.077928f, -0.480408f, -0.073135f, 0.435217f, 0.430494f, 0.375439f, -0.027335f, -0.377046f, -0.134818f, 
    -0.322073f, 0.164299f, 0.422668f, -0.264379f, -0.186885f, 0.405219f, 0.036982f, -0.290591f, 0.077514f, -0.272789f, 
    -0.155686f, -0.055024f, -0.145149f, 0.017282f, 0.276279f, 0.381036f, -0.280688f, -0.003944f, -0.325348f, 0.273719f, 
    0.433366f, 0.094759f, -0.422026f, -0.384991f, 0.149097f, -0.037403f, 0.079073f, -0.310613f, -0.498323f, -0.228875f, 
    0.451682f, 0.339256f, -0.393723f, 0.114499f, -0.102813f, -0.030770f, -0.068414f, 0.299907f, 0.429803f, 0.277443f, 
    -0.493292f, 0.080880f, 0.060344f, 0.414559f, 0.009392f, -0.241776f, 0.046730f, 0.047907f, 0.448767f, 0.426703f, 
    -0.499919f, -0.337700f, -0.120854f, -0.382594f, 0.184384f, -0.198693f, -0.182649f, 0.202089f, 0.420959f, 0.438297f, 
    0.083027f, -0.228513f, -0.056316f, -0.297057f, 0.226975f, -0.302742f, -0.215218f, -0.334062f, 0.261322f, 0.410287f, 
    -0.035304f, -0.190921f, 0.112159f, 0.034159f, 0.349231f, 0.325865f, -0.087870f, 0.171459f, 0.042055f, 0.416850f, 
    -0.089207f, 0.258896f, -0.021383f, -0.303003f, -0.116713f, 0.011442f, -0.251246f, -0.334489f, 0.060508f, -0.219588f, 
    0.180866f, 0.325204f, 0.438581f, 0.036051f, -0.274608f, -0.138336f, 0.300363f, 0.322755f, -0.391469f, -0.387070f, 
    -0.396395f, -0.008575f, -0.255225f, 0.144656f, -0.117425f, -0.399518f, -0.036784f, -0.061878f, 0.214152f, 0.088822f, 
    -0.415645f, -0.409673f, 0.301277f, -0.287165f, -0.298204f, -0.327415f, 0.134982f, -0.188718f, -0.142043f, 0.446950f, 
    -0.471013f, 0.255235f, 0.368316f, 0.102527f, -0.396072f, 0.248865f, -0.252501f, -0.361795f, 0.134432f, -0.063043f, 
    -0.445420f, -0.154398f, 0.051251f, 0.067784f, -0.393770f, 0.414906f, -0.188579f, 0.194353f, -0.249166f, -0.051736f, 
    0.300372f, -0.359356f, -0.381719f, -0.279852f, 0.448013f, 0.257164f, 0.142681f, 0.368970f, 0.307402f, 0.257877f, 
    -0.078324f, -0.189246f, 0.072960f, 0.148178f, -0.263260f, 0.452403f, -0.046124f, 0.312303f, -0.137093f, -0.059214f, 
    -0.341624f, 0.231800f, 0.051440f, -0.346080f, -0.052806f, 0.443566f, 0.190571f, -0.108881f, -0.030956f, 0.184089f, 
    0.374640f, -0.040257f, 0.038656f, -0.423029f, 0.036765f, -0.215822f, -0.174780f, -0.398280f, -0.071457f, -0.169944f
};

static const float input_1_scale = 0.0038622688f;
static const float input_1_zero_point = -0.0074801445f;
static const int8_t input_1_scales_frac[] = {23};
static const int input_1_sa_dim = -1;

static const int input_1_fx8_frac = 8;

#define INPUT_1_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {10, 45}, \
    /* .rank =  */ 2


static const mli_tensor input_1_tsr_fx16 = {
    INPUT_1_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};


static const mli_tensor input_1_tsr_sa8 = {
    INPUT_1_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

static const float input_2_data[] = {
    -0.073981f, -0.393418f, -0.046866f, -0.256056f, -0.168622f, 0.024018f, 0.312583f, 0.404920f, -0.128252f, -0.195426f, 
    0.331349f, -0.025850f, -0.210009f, -0.228304f, 0.007194f, -0.234319f, -0.076125f, -0.318358f, 0.019112f, 0.283709f, 
    -0.304293f, -0.265468f, -0.058526f, 0.395846f, 0.229520f, -0.229140f, -0.367296f, 0.086669f, 0.314014f, -0.448195f, 
    0.038448f, -0.131283f, -0.152695f, -0.154024f, 0.222740f, 0.311522f, 0.134357f, 0.304217f, -0.282900f, -0.458316f, 
    -0.335441f, -0.264267f, 0.021678f, -0.119994f, 0.007382f
};

static const float input_2_scale = 0.0033852418f;
static const float input_2_zero_point = -0.0266979933f;
static const int8_t input_2_scales_frac[] = {23};
static const int input_2_sa_dim = -1;

static const int input_2_fx8_frac = 8;

#define INPUT_2_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {45}, \
    /* .rank =  */ 1


static const mli_tensor input_2_tsr_fx16 = {
    INPUT_2_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};


static const mli_tensor input_2_tsr_sa8 = {
    INPUT_2_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

static const float prev_out_1_data[] = {
    0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 
    0.0f, 0.0f
};

static const float prev_out_1_scale = 1.0f;
static const float prev_out_1_zero_point = 0.0f;
static const int8_t prev_out_1_scales_frac[] = {0};
static const int prev_out_1_sa_dim = -1;

static const int prev_out_1_fx8_frac = -2;

#define PREV_OUT_1_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {21}, \
    /* .rank =  */ 1


static const mli_tensor prev_out_1_tsr_fx16 = {
    PREV_OUT_1_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};


static const mli_tensor prev_out_1_tsr_sa8 = {
    PREV_OUT_1_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

static const float prev_out_2_data[] = {
    -0.952562f, -0.998430f, -0.801853f, 0.470273f, -0.983646f, 0.139618f, 0.025110f, -0.998669f, 0.996371f, 0.075272f, 
    0.043633f, 0.715202f, 0.958081f, 0.289251f, -0.778187f, -0.354781f, -0.715274f, 0.906402f, 0.999899f, 0.850681f, 
    -0.134609f
};

static const float prev_out_2_scale = 0.0078375200f;
static const float prev_out_2_zero_point = 0.0006152391f;
static const int8_t prev_out_2_scales_frac[] = {21};
static const int prev_out_2_sa_dim = -1;

static const int prev_out_2_fx8_frac = 7;

#define PREV_OUT_2_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {21}, \
    /* .rank =  */ 1


static const mli_tensor prev_out_2_tsr_fx16 = {
    PREV_OUT_2_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};


static const mli_tensor prev_out_2_tsr_sa8 = {
    PREV_OUT_2_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

static const float weights_1_data[] = {
    -0.872902f, 0.283538f, -0.886071f, -0.094742f, -0.183509f, 0.770262f, -0.454453f, -0.532863f, 0.811640f, 0.831813f, 
    -0.709488f, 0.136591f, -0.553718f, 0.584037f, -0.991321f, 0.493198f, -0.655145f, -0.677211f, 0.966649f, 0.480896f, 
    0.819295f, -0.926538f, -0.014077f, 0.774531f, -0.310206f, 0.084446f, -0.615242f, 0.927212f, 0.545517f, -0.148083f, 
    0.320255f, -0.828719f, 0.896024f, -0.134106f, 0.692385f, 0.088915f, 0.259131f, -0.718380f, 0.624308f, 0.629463f, 
    0.597316f, -0.055897f, -0.787330f, -0.101873f, 0.528092f, 0.526355f, 0.086753f, 0.778310f, -0.458645f, 0.493737f, 
    -0.797352f, -0.512717f, 0.205136f, 0.625629f, 0.430907f, -0.648192f, -0.174327f, -0.554505f, 0.584880f, 0.470591f, 
    -0.332807f, 0.657440f, 0.566606f, -0.033807f, -0.285517f, 0.451981f, -0.285224f, -0.667111f, -0.109348f, -0.746968f, 
    -0.110360f, 0.381027f, -0.679044f, 0.883652f, -0.667485f, 0.140246f, -0.989824f, 0.672941f, -0.339687f, -0.973294f, 
    0.024519f, -0.880346f, -0.612857f, 0.857061f, 0.207116f, -0.033765f, -0.453525f, 0.801123f, 0.998073f, -0.355006f, 
    0.085517f, 0.143042f, 0.590336f, -0.713510f, -0.673290f, -0.158132f, -0.971189f, -0.879448f, 0.228875f, 0.098749f, 
    0.132038f, 0.965143f, 0.008677f, 0.566014f, -0.077979f, -0.847934f, 0.183069f, 0.010655f, -0.405113f, 0.871698f, 
    -0.417750f, 0.525155f, -0.058603f, 0.701131f, 0.915945f, -0.023276f, -0.824718f, -0.508782f, 0.692749f, -0.919684f, 
    -0.638924f, -0.006848f, -0.601909f, 0.314812f, 0.197433f, -0.866103f, 0.662088f, -0.070292f, -0.880469f, 0.481715f, 
    -0.582038f, 0.625354f, 0.014959f, 0.281606f, 0.519045f, 0.170123f, -0.093325f, -0.971667f, -0.386996f, -0.603977f, 
    0.286631f, 0.667821f, -0.261829f, 0.541410f, -0.430020f, 0.085242f, 0.122564f, -0.282372f, -0.210558f, 0.384373f, 
    0.137122f, 0.393832f, -0.994149f, 0.620714f, 0.617644f, 0.213706f, -0.260536f, 0.526041f, -0.934093f, 0.663371f, 
    -0.542811f, 0.223351f, -0.030592f, 0.739394f, -0.024723f, 0.946724f, -0.256401f, 0.088833f, -0.218757f, 0.744111f, 
    -0.199538f, 0.469036f, -0.833373f, -0.820712f, -0.481447f, 0.766668f, 0.296190f, 0.170564f, 0.848644f, -0.093552f, 
    -0.065663f, 0.865838f, -0.484487f, -0.547828f, 0.958263f, -0.604791f, -0.699281f, 0.297200f, -0.033738f, 0.057846f, 
    -0.545146f, -0.734215f, 0.015026f, -0.604522f, 0.972991f, 0.178238f, 0.012757f, -0.490461f, 0.034445f, 0.075015f, 
    -0.420235f, 0.024611f, -0.628725f, 0.283891f, -0.154520f, 0.066271f, 0.841047f, 0.155695f, -0.022805f, 0.542771f, 
    0.252279f, 0.662706f, -0.627041f, 0.793147f, 0.232069f, -0.741373f, 0.164660f, -0.615994f, 0.913126f, -0.378348f, 
    -0.255843f, -0.211288f, -0.421016f, -0.234961f, 0.221957f, -0.166632f, -0.870848f, -0.337083f, -0.622263f, 0.669093f, 
    0.887145f, 0.672694f, -0.668846f, 0.061069f, -0.385730f, -0.152247f, 0.601258f, -0.190988f, 0.724209f, -0.800925f, 
    0.625010f, -0.866201f, 0.495877f, -0.891299f, -0.060686f, 0.940005f, -0.933861f, 0.297426f, 0.314375f, -0.363516f, 
    -0.757311f, -0.943266f, -0.276722f, -0.183053f, 0.865775f, -0.356736f, -0.410069f, -0.297989f, -0.365746f, -0.215597f, 
    0.684491f, 0.609358f, -0.159429f, -0.383429f, -0.147451f, 0.633353f, 0.868655f, 0.149160f, 0.574434f, 0.263585f, 
    -0.588772f, 0.559462f, -0.607289f, -0.204487f, 0.319349f, -0.484420f, 0.638781f, -0.439422f, -0.497268f, 0.697713f, 
    -0.015690f, 0.751421f, 0.358696f, 0.403405f, -0.777839f, -0.939702f, 0.826571f, -0.167634f, -0.819267f, -0.445930f, 
    0.831926f, -0.971750f, 0.664126f, -0.816574f, -0.538096f, 0.040512f, -0.291409f, 0.226655f, 0.494502f, -0.962663f, 
    0.980261f, 0.641164f, -0.678284f, -0.005294f, 0.973382f, 0.247770f, 0.186091f, 0.387701f, -0.421456f, 0.293454f, 
    0.284007f, 0.931364f, 0.612769f, -0.160872f, -0.447303f, 0.754497f, 0.312195f, -0.511806f, 0.296291f, -0.677210f, 
    0.765434f, 0.471681f, -0.133281f, -0.651817f, -0.597316f, 0.417499f, -0.825452f, 0.309209f, -0.004455f, 0.118624f, 
    0.698215f, 0.129028f, -0.155313f, 0.780785f, 0.539934f, 0.018578f, 0.800250f, -0.022086f, -0.821528f, -0.253810f, 
    0.907979f, -0.643602f, -0.827321f, -0.839362f, 0.942719f, 0.305953f, 0.674378f, 0.768928f, 0.208686f, 0.678803f, 
    -0.950114f, -0.104785f, -0.662878f, 0.585382f, 0.953455f, 0.825913f, 0.614613f, 0.642426f, 0.218471f, 0.434546f, 
    0.093401f, 0.953946f, -0.748132f, -0.759824f, -0.341094f, 0.151738f, 0.287715f, -0.035190f, -0.166817f, -0.632708f, 
    0.345924f, 0.142081f, 0.392096f, -0.825497f, -0.971186f, 0.569363f, -0.292958f, -0.152954f, -0.217273f, 0.311386f, 
    -0.625829f, 0.964166f, 0.537990f, 0.272196f, -0.373703f, -0.131800f, 0.068349f, 0.850920f, -0.215687f, -0.938263f, 
    0.641931f, 0.470001f, -0.625628f, -0.176997f, 0.243189f, -0.072861f, -0.268354f, 0.979128f, 0.759063f, 0.096839f, 
    0.598179f, -0.904727f, 0.181323f, -0.259034f, 0.907931f, 0.251817f, -0.379035f, 0.128546f, -0.383206f, -0.248289f, 
    0.336650f, 0.162395f, -0.619410f, 0.186396f, 0.049477f, 0.169398f, -0.789263f, 0.105920f, 0.329574f, -0.243221f, 
    0.502142f, 0.915060f, -0.306106f, -0.402894f, -0.145196f, 0.027889f, -0.585279f, 0.296929f, 0.697228f, 0.262795f, 
    0.344464f, 0.200412f, -0.914251f, 0.002258f, -0.878380f, 0.736657f, 0.205193f, 0.838853f, -0.871333f, 0.611819f, 
    -0.127905f, 0.265697f, 0.669204f, -0.038340f, -0.454756f, -0.989590f, -0.044805f, 0.040481f, -0.801630f, -0.159296f,
     0.432550f, 0.085688f, -0.939324f, -0.208825f, 0.473686f, -0.424850f, -0.077341f, 0.100405f, 0.370831f, -0.416232f, 
     0.078806f, 0.671878f, -0.676209f, 0.071415f, 0.816714f, -0.349117f, -0.311784f, 0.650240f, 0.320430f, -0.860963f, 
     -0.739784f, 0.845725f, 0.929724f, -0.308182f, 0.703878f, 0.303432f, 0.467589f, 0.548392f, -0.805244f, -0.403818f, 
     0.093942f, 0.922039f, 0.705473f, -0.452479f, -0.075569f, -0.879728f, 0.063239f, 0.889364f, -0.967662f, -0.604151f, 
     -0.910100f, 0.302685f, 0.594242f, -0.786558f, -0.259673f, 0.835226f, 0.016364f, 0.870262f, 0.576205f, -0.370272f, 
     -0.621583f, -0.829780f, 0.641897f, 0.972204f, -0.551842f, 0.656226f, -0.661035f, 0.393614f, 0.953059f, 0.235269f, 
     0.288858f, -0.813262f, 0.324253f, -0.466492f, 0.162830f, 0.743783f, 0.220078f, -0.614126f, -0.034551f, -0.297453f,
      -0.626471f, 0.292769f, -0.620125f, -0.335248f, 0.703854f, -0.629830f, -0.955257f, -0.918570f, 0.723968f, 0.263853f, 
      -0.105350f, -0.014266f, -0.474739f, 0.125218f, 0.056590f, -0.132623f, 0.463404f, 0.196584f, 0.081711f, 0.355448f, 
      0.249520f, -0.692822f, -0.480140f, -0.826529f, -0.353655f, -0.748169f, -0.087522f, 0.869225f, 0.555907f, -0.161330f, 
      -0.787513f, 0.191783f, -0.949263f, -0.859875f, -0.724693f, 0.350522f, 0.300906f, 0.147623f, 0.032240f, 0.481536f, 
      -0.448830f, -0.027051f, 0.438929f, 0.600860f, 0.088868f, -0.722345f, -0.139806f, 0.690815f, -0.662184f, 0.869286f, 
      -0.882663f, -0.497618f, -0.333346f, -0.531086f, -0.827961f, 0.273114f, 0.717359f, 0.758486f, 0.632248f, 0.592136f, 
      0.172292f, -0.366309f, -0.142095f, 0.339565f, 0.658203f, 0.320576f, 0.940589f, 0.119947f, 0.703381f, 0.313803f, 
      -0.786860f, 0.622464f, 0.124320f, 0.347216f, -0.948423f, -0.026209f, 0.317702f, -0.439601f, 0.918853f, 0.683045f, 
      -0.571682f, 0.909080f, -0.011911f, 0.362072f, 0.433114f, -0.961987f, -0.747947f, -0.097197f, -0.837664f, -0.023768f, 
      -0.357495f, 0.985421f, -0.185669f, -0.975865f, -0.807715f, -0.668111f, 0.056585f, 0.136282f, -0.463853f, 0.122949f, 
      0.292836f, 0.566401f, -0.023331f, -0.705030f, -0.637818f, 0.127703f, -0.934736f, -0.496645f, 0.834192f, 0.021296f, 
      0.454037f, 0.954950f, -0.350683f, -0.522488f, 0.846219f, -0.364125f, -0.023798f, 0.063983f, -0.908256f, -0.059700f, 
      -0.507620f, 0.156999f, 0.807397f, -0.839224f, -0.875243f, -0.599003f, -0.609340f, -0.836705f, -0.507154f, 0.367933f, 
      0.981761f, 0.096121f, 0.247487f, 0.540161f, 0.940034f, -0.528012f, -0.986945f, -0.556695f, 0.554088f, 0.700075f, 
      -0.512869f, -0.220017f, 0.001336f, -0.809439f, 0.066613f, 0.941961f, 0.084519f, -0.664931f, -0.890666f, -0.950368f, 
      0.779705f, 0.683190f, -0.490535f, 0.021956f, -0.293213f, 0.688015f, -0.360702f, -0.277593f, 0.251079f, -0.196938f, 
      0.068969f, -0.244814f, -0.367923f, 0.807010f, 0.742864f, 0.647913f, 0.820969f, -0.428372f, 0.201981f, -0.687662f, 
      -0.809401f, 0.552190f, 0.729294f, 0.731935f, -0.279524f, 0.644115f, -0.123078f, -0.455653f, 0.588157f, 0.630501f, 
      0.328082f, -0.497352f, -0.176509f, -0.650837f, 0.670634f, 0.493144f, -0.400565f, 0.302529f, 0.822232f, 0.231506f, 
      -0.532435f, -0.622323f, 0.037151f, 0.897050f, 0.610212f, 0.500725f, 0.438244f, -0.067325f, 0.013352f, -0.016628f, 
      -0.212369f, -0.375899f, 0.505953f, 0.783606f, 0.085324f, 0.691483f, -0.955680f, -0.389791f, 0.491432f, -0.045871f,
       0.862165f, 0.463398f, 0.254853f, -0.779802f, 0.665015f, 0.610872f, -0.091950f, 0.341467f, -0.101666f, -0.438089f, 
       -0.596836f, -0.983518f, -0.073694f, 0.930277f, -0.064100f, -0.696587f, -0.305712f, 0.205578f, 0.554677f, -0.716381f, 
       -0.548447f, 0.651650f, -0.415792f, 0.673124f, -0.498276f, -0.229748f, 0.662939f, 0.099508f, -0.386263f, -0.401060f,
        0.560754f, 0.806698f, 0.803967f, 0.425846f, -0.233268f, -0.738372f, 0.999556f, -0.303527f, 0.208585f, -0.345272f, 
        0.865302f, -0.522877f, -0.429093f, 0.377838f, -0.282360f, 0.870183f, -0.854466f, 0.750466f, -0.350703f, 0.041120f, 
        0.466716f, 0.100708f, -0.145216f, 0.558994f, -0.763463f, 0.562470f, -0.170661f, 0.523970f, -0.688517f, 0.788807f, 
        0.910634f, -0.098054f, -0.353718f, -0.791868f, 0.140207f, 0.501478f, 0.262305f, 0.610177f, 0.280953f, 0.198271f,
        -0.716103f, 0.247930f, -0.735630f, -0.450427f, -0.939971f, -0.827016f, -0.872190f, -0.411049f, 0.689599f, -0.947581f, 
        -0.417005f, 0.771110f, -0.523912f, 0.741901f, -0.726866f, -0.591473f, 0.583859f, 0.228531f, 0.372288f, 0.748788f, 
        0.750150f, 0.540454f, -0.419529f, 0.966013f, 0.573554f, -0.356106f, 0.163919f, -0.456666f, -0.296149f, 0.571023f, 
        -0.630920f, 0.787088f, -0.468868f, 0.277170f, -0.786735f, 0.452829f, -0.406493f, -0.918751f, 0.692600f, 0.304580f, 
        0.038585f, 0.522657f, 0.902679f, -0.518962f, 0.036681f, -0.445712f, -0.568662f, 0.960567f, 0.175662f, 0.165107f, 
        0.134790f, 0.188154f, 0.755263f, 0.132477f, 0.600766f, -0.335736f, -0.564843f, 0.088733f, -0.779877f, -0.894105f, 
        0.592711f, 0.580784f, 0.402803f, 0.964219f, -0.503205f, 0.173100f, 0.874018f, 0.628634f, -0.197715f, 0.381513f, 
        0.640914f, -0.978743f, -0.095866f, -0.393065f, -0.009353f, 0.346044f, -0.649642f, -0.981214f, 0.076264f, 0.524804f, 
        -0.837720f, 0.453198f, 0.535425f, -0.693031f, 0.973179f, -0.083707f, 0.630300f, 0.648089f, 0.636187f, 0.623542f, 
        0.110564f, 0.443208f, 0.255715f, -0.266260f, -0.876383f, 0.521495f, -0.810034f, -0.763066f, -0.773739f, -0.178584f, 
        0.042736f, -0.994904f, 0.056051f, -0.746148f, -0.503546f, 0.237688f, 0.479910f, 0.806826f, 0.134551f, 0.237324f, 
        0.086139f, 0.548319f, 0.356741f, -0.312215f, -0.184414f, 0.832905f, -0.981332f, 0.210081f, -0.887605f, 0.589919f, 
        -0.211550f, 0.638671f, -0.299064f, 0.713544f, -0.190899f, -0.869363f, 0.225517f, 0.192053f, -0.279891f, 0.931582f, 
        0.235212f, 0.959095f, -0.877438f, 0.945955f, 0.994750f, 0.910002f, 0.918856f, 0.983501f, 0.035888f, -0.988224f, 
        -0.242475f, 0.343431f, 0.153169f, -0.326001f, 0.260674f, 0.476249f, 0.976180f, -0.017289f, -0.183708f, 0.553085f, 
        0.991313f, -0.386153f, -0.282335f, 0.009329f, -0.594037f, -0.283888f, 0.738747f, 0.829165f, -0.266102f, 0.029086f, 
        0.408444f, -0.923847f, -0.452773f, 0.008077f, 0.182923f, -0.118996f, -0.643656f, -0.850263f, 0.854936f, -0.654214f, 
        0.588944f, -0.722466f, -0.721438f, 0.174573f, -0.701752f, 0.154423f, -0.698297f, 0.669351f, -0.235318f, 0.975345f, 
        -0.910232f, 0.925714f, -0.225228f, 0.192359f, -0.225728f, -0.551580f, 0.841739f, -0.643647f, 0.179260f, 0.415820f,
        0.592328f, -0.274640f, -0.724866f, -0.276631f, -0.251277f, -0.614377f, 0.825898f, -0.492486f, -0.669135f, -0.954145f, 
        -0.822580f, -0.137794f, 0.316910f, -0.472884f, -0.425361f, -0.013193f, 0.132902f, -0.618970f, 0.938553f, 0.115695f, 
        -0.282644f, 0.115402f, -0.850203f, -0.503943f, -0.064193f, 0.390778f, 0.681974f, -0.758042f, 0.715126f, -0.054282f, 
        0.068348f, 0.632036f, 0.633061f, -0.286092f, -0.148694f, -0.838795f, -0.509510f, -0.928705f, 0.374170f, 0.255292f, 
        -0.285099f, -0.029862f, 0.970580f, -0.869595f, 0.116114f, 0.638613f, -0.200017f, -0.701953f, 0.855026f, -0.606461f, 
        -0.277491f, 0.883175f, 0.192177f, 0.071069f, -0.913013f, 0.895658f, 0.889643f, 0.874012f, 0.012993f, 0.574246f, 
        -0.965934f, 0.060256f, 0.847590f, 0.941662f, 0.642171f, -0.203647f, 0.733197f, -0.126000f, -0.280432f, 0.742603f, 
        -0.729641f, -0.480540f, -0.296503f, -0.266655f, -0.130014f, 0.460133f, 0.575391f, -0.190167f, 0.796736f, -0.968741f, 
        -0.576813f, 0.297606f, -0.684866f, 0.461954f, -0.565878f, -0.451558f, -0.621070f, -0.505027f, 0.681044f, 0.603022f, 
        0.873225f, 0.926374f, 0.379805f, -0.159501f, -0.476021f, -0.811912f, 0.188741f, 0.297371f, 0.184407f, 0.391076f, 
        0.860786f, -0.172470f, 0.266500f, 0.048461f, 0.807680f, 0.658927f, -0.459184f, -0.113650f, -0.628495f, -0.866037f, 
        0.298283f, -0.919445f, -0.295918f, -0.182527f, 0.975641f, 0.439797f, 0.402493f, -0.486912f, -0.324650f, 0.988686f, 
        -0.923633f, 0.646680f, -0.448196f, 0.637261f, -0.349833f, -0.411755f, 0.200924f, 0.095705f, 0.635828f, -0.240050f, 
        0.192684f, -0.403912f, -0.748756f, -0.754791f, -0.781157f, 0.700693f, -0.382528f, 0.306472f, 0.330871f, -0.760298f, 
        -0.711552f, 0.548592f, -0.827002f, -0.100905f, -0.892361f, 0.861750f, -0.902537f, 0.857757f, 0.666240f, -0.892983f, 
        -0.652246f, -0.414466f, -0.057260f, 0.465776f, 0.710119f, 0.513115f, -0.983545f, -0.797996f, 0.190372f, 0.157760f, 
        0.380509f, -0.708323f, -0.189466f, -0.892367f, -0.521784f, 0.195668f, -0.668419f, 0.985887f, -0.479763f, -0.659831f, 
        0.490086f, 0.015189f, 0.895130f, -0.179579f, -0.694185f, 0.527509f, -0.762820f, -0.728059f, 0.515582f, 0.515560f, 
        0.846936f, 0.756883f, -0.011732f, 0.892787f, -0.943660f, -0.996837f, 0.627549f, 0.693845f, 0.580943f, 0.656593f, 
        -0.392601f, -0.833140f, -0.553219f, 0.099443f, -0.295554f, -0.779300f, 0.619823f, -0.631191f, 0.337769f, -0.918334f, 
        0.754530f, 0.617699f, -0.642397f, -0.009977f, -0.715677f, -0.800034f, 0.607581f, -0.297631f, -0.504733f, 0.203030f, 
        0.550858f, 0.641855f, 0.053438f, 0.981283f, -0.532169f, -0.085901f, -0.514146f, 0.068781f, 0.559409f, 0.517625f, 
        -0.133737f, -0.945574f, 0.760470f, -0.880532f, -0.994844f, -0.811678f, 0.713257f, 0.225210f, -0.259140f, -0.420462f, 
        -0.671676f, 0.995607f, 0.380020f, 0.446499f, -0.420776f, 0.721612f, -0.949678f, -0.361974f, 0.091632f, 0.167186f, 
        0.544600f, -0.057410f, 0.232619f, -0.689680f, 0.634028f, -0.397883f, -0.881171f, 0.363372f, 0.937122f, 0.284673f, 
        0.623210f, 0.726513f, 0.385105f, 0.543729f, -0.520161f, 0.286471f, -0.603289f, 0.146591f, 0.113412f, -0.384162f, 
        -0.531806f, 0.968229f, 0.101049f, -0.775442f, -0.907239f, -0.481508f, -0.573751f, -0.411331f, 0.930825f, 0.367769f, 
        -0.034228f, 0.774329f, -0.884276f, -0.669114f, 0.545905f, -0.696552f, 0.813009f, -0.734078f, 0.653039f, -0.261037f, 
        0.977576f, 0.818095f, 0.019718f, 0.666134f, 0.898278f, -0.954921f, -0.378061f, -0.233687f, 0.087459f, -0.934533f, 
        0.290102f, -0.092514f, 0.743953f, 0.396814f, 0.655511f, -0.618683f, 0.325746f, -0.931130f, -0.783820f, -0.904929f, 
        -0.720781f, 0.751673f, -0.678154f, 0.384073f, -0.196695f, -0.569849f, -0.903197f, -0.584821f, 0.089269f, -0.217853f, 
        -0.731097f, -0.830242f, 0.345034f, 0.666839f, -0.741606f, -0.483157f, 0.908085f, -0.296405f, -0.881917f, 0.718539f, 
        0.605427f, 0.360096f, 0.974008f, 0.458450f, -0.239147f, 0.147634f, 0.971828f, 0.855642f, 0.137753f, 0.803423f, 
        -0.514950f, -0.004002f, 0.309062f, 0.320052f, -0.838937f, -0.495922f, -0.556642f, -0.796403f, 0.428791f, 
        -0.632753f, -0.946830f, 0.927816f, 0.121771f, -0.074048f, -0.749302f, -0.457619f, 0.064845f, 0.823350f, 
        0.036128f, -0.707332f, 0.512941f, 0.892627f, -0.985761f, 0.489195f, -0.856822f, -0.563735f, 0.828678f, 
        -0.213414f, 0.169449f, 0.815178f, -0.783211f, -0.126221f, -0.779278f, 0.177693f, 0.759241f, 0.911251f, 
        0.524018f, -0.514195f, 0.548916f, 0.998509f, 0.492136f, 0.290717f, 0.495516f, -0.944031f, 0.593462f, 
        -0.056629f, 0.374606f, -0.107535f, -0.958216f, -0.235455f, 0.539816f, -0.828374f, 0.237865f, 0.274053f, 
        0.196695f, -0.935241f, -0.023984f, -0.127488f, -0.773160f, -0.678532f, -0.237309f, -0.665275f, 0.709386f, 
        -0.160555f, -0.817945f, 0.117022f
};

static const float weights_1_scale = 0.0078396574f;
static const float weights_1_zero_point = 0.0f;
static const int8_t weights_1_scales_frac[] = {21};
static const int weights_1_sa_dim = -1;

static const int weights_1_fx8_frac = 7;

#define WEIGHTS_1_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {21, 66}, \
    /* .rank =  */ 2


static const mli_tensor weights_1_tsr_fx16 = {
    WEIGHTS_1_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};


static const mli_tensor weights_1_tsr_fx8 = {
    WEIGHTS_1_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_8,
    /* .el_params = */ { 0 }
};


static const mli_tensor weights_1_tsr_sa8 = {
    WEIGHTS_1_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

static const float bias_1_data[] = {
    0.176345f, 0.009683f, -0.056492f, -0.024836f, 0.141631f, 0.152541f, 0.091757f, 0.114015f, 0.208238f, -0.127407f, 
    0.085261f, 0.121543f, -0.062138f, 0.117980f, 0.015660f, -0.095964f, 0.161241f, 0.220358f, -0.006466f, -0.133422f, 
    -0.140065f
};

static const float bias_1_scale = 0.0000302789f;
static const float bias_1_zero_point = 0.0f;
static const int8_t bias_1_scales_frac[] = {30};
static const int bias_1_sa_dim = -1;

static const float bias_1_i2_w1_scale = 0.0000265391f;
static const float bias_1_i2_w1_zero_point = 0.0f;
static const int8_t bias_1_i2_w1_scales_frac[] = {30};
static const int bias_1_i2_w1_sa_dim = -1;

static const int bias_1_fx8_frac = 9;

#define BIAS_1_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {21}, \
    /* .rank =  */ 1


static const mli_tensor bias_1_tsr_fx16 = {
    BIAS_1_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};


static const mli_tensor bias_1_tsr_fx8 = {
    BIAS_1_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_8,
    /* .el_params = */ { 0 }
};

static const mli_tensor bias_1_tsr_sa32 = {
    BIAS_1_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_32,
    /* .el_params = */ { 0 }
};

static const mli_tensor bias_1_i2_w1_tsr_sa32 = {
    BIAS_1_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_32,
    /* .el_params = */ { 0 }
};

static const float test_1_out_data[] = {
    -0.416596f, 0.758406f, -0.961135f, -0.517073f, 0.972013f, 0.932048f, -0.442499f, -0.657789f, -0.601248f, 0.814999f, 
    0.132109f, 0.522635f, 0.852569f, 0.996546f, 0.635923f, 0.416378f, -0.713309f, -0.729340f, 0.532912f, 0.855144f, 
    0.042251f, -0.952562f, -0.998430f, -0.801853f, 0.470273f, -0.983646f, 0.139618f, 0.025110f, -0.998669f, 0.996371f, 
    0.075272f, 0.043633f, 0.715202f, 0.958081f, 0.289251f, -0.778187f, -0.354781f, -0.715274f, 0.906402f, 0.999899f, 
    0.850681f, -0.134609f, -0.993628f, -0.971228f, -0.957889f, -0.439681f, -0.647397f, 0.733795f, -0.865277f, -0.775855f, 
    0.935343f, 0.959064f, 0.994843f, 0.468400f, -0.723316f, 0.924493f, 0.918382f, 0.999334f, 0.998836f, 0.534246f, 
    0.345197f, 0.996675f, -0.976914f, 0.772671f, -0.999996f, -0.999714f, -0.168341f, -0.998997f, -0.852238f, 
    -0.287806f, -0.879361f, 0.934004f, 0.976169f, 0.487885f, 0.366425f, 0.988206f, -0.953042f, 0.223347f, 0.765223f, 
    0.996442f, -0.950370f, -0.443707f, 0.927827f, -0.998714f, -0.795850f, -0.988568f, -0.999659f, -0.996692f, 0.584080f, 
    0.979266f, -0.842068f, -0.998967f, 0.086238f, 0.984338f, 0.642634f, 0.711637f, -0.990882f, -0.268377f, 0.663720f, 
    0.995028f, 0.955610f, 0.932226f, -0.720746f, -0.945216f, -0.978254f, -0.454525f, -0.999935f, -0.950380f, 0.950579f, 
    -0.999606f, -0.973043f, -0.487451f, 0.737677f, 0.829940f, -0.863622f, -0.959225f, 0.086417f, 0.992485f, -0.940968f, 
    0.947622f, -0.999238f, 0.931275f, 0.652437f, 0.643759f, -0.936305f, 0.999081f, 0.443883f, 0.219090f, -0.531181f, 
    -0.963671f, -0.196172f, -0.684780f, -0.922921f, 0.999258f, -0.717716f, -0.698704f, 0.996433f, -0.119618f, -0.964443f, 
    0.999960f, -0.927713f, 0.999613f, 0.937660f, -0.999964f, -0.560628f, 0.999752f, 0.588956f, 0.768664f, 0.985213f, 
    0.985172f, -0.999428f, -0.615840f, 0.998374f, 0.991898f, -0.989741f, 0.252333f, 0.997182f, -0.990716f, -0.965321f, 
    0.855143f, -0.999355f, -0.917091f, -0.998579f, -0.814627f, -0.981658f, -0.445528f, 0.995761f, -0.996355f, -0.997332f, 
    -0.728232f, -0.593202f, 0.751519f, 0.997812f, 0.900757f, 0.998749f, 0.969161f, -0.994783f, -0.999861f, -0.993862f, 
    -0.194148f, -0.994389f, -0.825004f, 0.828505f, -0.623387f, -0.996880f, 0.999793f, 0.966438f, -1.000000f, 0.980819f, 
    -0.821000f, 0.534605f, 0.983364f, 0.982865f, -0.723002f, -0.998040f, -0.999114f, 0.972266f, 0.995944f, -0.991568f, 
    -0.380902f, 0.345077f, -0.176383f, 0.999873f, 0.626413f, -0.366651f, 0.782494f, -0.962817f, 0.924730f, 0.999592f, 
    0.787952f
};

static const float test_1_out_scale = 0.0078429794f;
static const float test_1_out_zero_point = -0.0000202060f;
static const int8_t test_1_out_scales_frac[] = {21};
static const int test_1_out_sa_dim = -1;

static const int test_1_out_fx8_frac = 7;

#define TEST_1_OUT_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {10, 21}, \
    /* .rank =  */ 2


static const mli_tensor test_1_out_tsr_fx16 = {
    TEST_1_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};


static const mli_tensor test_1_out_tsr_sa8 = {
    TEST_1_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

static const float test_2_out_data[] = {
    -0.821000f, 0.534605f, 0.983364f, 0.982865f, -0.723002f, -0.998040f, -0.999114f, 0.972266f, 0.995944f, -0.991568f, 
    -0.380902f, 0.345077f, -0.176383f, 0.999873f, 0.626413f, -0.366651f, 0.782494f, -0.962817f, 0.924730f, 0.999592f, 
    0.787952f
};

static const float test_2_out_scale = 0.0078391647f;
static const float test_2_out_zero_point = 0.0003792048f;
static const int8_t test_2_out_scales_frac[] = {21};
static const int test_2_out_sa_dim = -1;

static const int test_2_out_fx8_frac = 7;

#define TEST_2_OUT_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {21}, \
    /* .rank =  */ 1


static const mli_tensor test_2_out_tsr_fx16 = {
    TEST_2_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};


static const mli_tensor test_2_out_tsr_sa8 = {
    TEST_2_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

static const float test_3_out_data[] = {
    -0.993628f, -0.971228f, -0.957889f, -0.439681f, -0.647397f, 0.733795f, -0.865277f, -0.775855f, 0.935343f, 0.959064f, 
    0.994843f, 0.468400f, -0.723316f, 0.924493f, 0.918382f, 0.999334f, 0.998836f, 0.534246f, 0.345197f, 0.996675f, 
    -0.976914f
};

static const float test_3_out_scale = 0.0078155398f;
static const float test_3_out_zero_point = 0.0028529167f;
static const int8_t test_3_out_scales_frac[] = {21};
static const int test_3_out_sa_dim = -1;

static const int test_3_out_fx8_frac = 7;

#define TEST_3_OUT_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {21}, \
    /* .rank =  */ 1


static const mli_tensor test_3_out_tsr_fx16 = {
    TEST_3_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};


static const mli_tensor test_3_out_tsr_sa8 = {
    TEST_3_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

tensor_quantizer input_1_fx16(input_1_tsr_fx16, input_1_fx8_frac + 8, input_1_data, sizeof(input_1_data) / sizeof(input_1_data[0]));
tensor_quantizer input_1_sa8(input_1_tsr_sa8, input_1_sa_dim, input_1_data, 
sizeof(input_1_data) / sizeof(input_1_data[0]), &input_1_scale, 1, &input_1_zero_point, 1, input_1_scales_frac, 1);

tensor_quantizer input_2_fx16(input_2_tsr_fx16, input_2_fx8_frac + 8, input_2_data, sizeof(input_2_data) / sizeof(input_2_data[0]));
tensor_quantizer input_2_sa8(input_2_tsr_sa8, input_2_sa_dim, input_2_data, 
sizeof(input_2_data) / sizeof(input_2_data[0]), &input_2_scale, 1, &input_2_zero_point, 1, input_2_scales_frac, 1);

tensor_quantizer prev_out_1_fx16(prev_out_1_tsr_fx16, prev_out_1_fx8_frac + 8, prev_out_1_data, sizeof(prev_out_1_data) / sizeof(prev_out_1_data[0]));
tensor_quantizer prev_out_1_sa8(prev_out_1_tsr_sa8, prev_out_1_sa_dim, prev_out_1_data, 
sizeof(prev_out_1_data) / sizeof(prev_out_1_data[0]), &prev_out_1_scale, 1, &prev_out_1_zero_point, 1, prev_out_1_scales_frac, 1);

tensor_quantizer prev_out_2_fx16(prev_out_2_tsr_fx16, prev_out_2_fx8_frac + 8, prev_out_2_data, sizeof(prev_out_2_data) / sizeof(prev_out_2_data[0]));
tensor_quantizer prev_out_2_sa8(prev_out_2_tsr_sa8, prev_out_2_sa_dim, prev_out_2_data, 
sizeof(prev_out_2_data) / sizeof(prev_out_2_data[0]), &prev_out_2_scale, 1, &prev_out_2_zero_point, 1, prev_out_2_scales_frac, 1);

tensor_quantizer weights_1_fx16(weights_1_tsr_fx16, weights_1_fx8_frac + 8, weights_1_data, sizeof(weights_1_data) / sizeof(weights_1_data[0]));
tensor_quantizer weights_1_fx8(weights_1_tsr_fx8, weights_1_fx8_frac, weights_1_data, sizeof(weights_1_data) / sizeof(weights_1_data[0]));
tensor_quantizer weights_1_sa8(weights_1_tsr_sa8, weights_1_sa_dim, weights_1_data, 
sizeof(weights_1_data) / sizeof(weights_1_data[0]), &weights_1_scale, 1, &weights_1_zero_point, 1, weights_1_scales_frac, 1);

tensor_quantizer bias_1_fx16(bias_1_tsr_fx16, bias_1_fx8_frac + 8, bias_1_data, sizeof(bias_1_data) / sizeof(bias_1_data[0]));
tensor_quantizer bias_1_fx8(bias_1_tsr_fx8, bias_1_fx8_frac, bias_1_data, sizeof(bias_1_data) / sizeof(bias_1_data[0]));
tensor_quantizer bias_1_sa32(bias_1_tsr_sa32, bias_1_sa_dim, bias_1_data, 
sizeof(bias_1_data) / sizeof(bias_1_data[0]), &bias_1_scale, 1, &bias_1_zero_point, 1, bias_1_scales_frac, 1);
tensor_quantizer bias_1_i2_w1_sa32(bias_1_i2_w1_tsr_sa32, bias_1_i2_w1_sa_dim, bias_1_data, 
sizeof(bias_1_data) / sizeof(bias_1_data[0]), &bias_1_i2_w1_scale, 1, &bias_1_i2_w1_zero_point, 1, bias_1_i2_w1_scales_frac, 1);

tensor_quantizer test_1_out_fx16(test_1_out_tsr_fx16, test_1_out_fx8_frac + 8, test_1_out_data, sizeof(test_1_out_data) / sizeof(test_1_out_data[0]));
tensor_quantizer test_1_out_sa8(test_1_out_tsr_sa8, test_1_out_sa_dim, test_1_out_data, 
sizeof(test_1_out_data) / sizeof(test_1_out_data[0]), &test_1_out_scale, 1, &test_1_out_zero_point, 1, test_1_out_scales_frac, 1);

tensor_quantizer test_2_out_fx16(test_2_out_tsr_fx16, test_2_out_fx8_frac + 8, test_2_out_data, sizeof(test_2_out_data) / sizeof(test_2_out_data[0]));
tensor_quantizer test_2_out_sa8(test_2_out_tsr_sa8, test_2_out_sa_dim, test_2_out_data, 
sizeof(test_2_out_data) / sizeof(test_2_out_data[0]), &test_2_out_scale, 1, &test_2_out_zero_point, 1, test_2_out_scales_frac, 1);

tensor_quantizer test_3_out_fx16(test_3_out_tsr_fx16, test_3_out_fx8_frac + 8, test_3_out_data, sizeof(test_3_out_data) / sizeof(test_3_out_data[0]));
tensor_quantizer test_3_out_sa8(test_3_out_tsr_sa8, test_3_out_sa_dim, test_3_out_data, 
sizeof(test_3_out_data) / sizeof(test_3_out_data[0]), &test_3_out_scale, 1, &test_3_out_zero_point, 1, test_3_out_scales_frac, 1);

const mli_rnn_cell_cfg test_1_cfg = {
    /* .mode = */RNN_BATCH_TO_BATCH,
    /* .act = */RNN_ACT_TANH
};

const mli_rnn_cell_cfg test_2_cfg = {
    /* .mode = */RNN_BATCH_TO_LAST,
    /* .act = */RNN_ACT_TANH
};

const mli_rnn_cell_cfg test_3_cfg = {
    /* .mode = */RNN_ONE_TO_ONE,
    /* .act = */RNN_ACT_TANH
};
